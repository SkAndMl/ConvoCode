React Reference Overview – ReactJoin us for React Conf on May 15-16.Learn more.ReactSearch⌘CtrlKLearnReferenceCommunityBlogreact@18.2.0Overview Hooks use - This feature is available in the latest CanaryuseCallback useContext useDebugValue useDeferredValue useEffect useId useImperativeHandle useInsertionEffect useLayoutEffect useMemo useOptimistic - This feature is available in the latest CanaryuseReducer useRef useState useSyncExternalStore useTransition Components <Fragment> (<>) <Profiler> <StrictMode> <Suspense> APIs cache - This feature is available in the latest CanarycreateContext forwardRef lazy memo startTransition experimental_taintObjectReference - This feature is available in the latest Canaryexperimental_taintUniqueValue - This feature is available in the latest CanaryDirectives - This feature is available in the latest Canary'use client' - This feature is available in the latest Canary'use server' - This feature is available in the latest Canaryreact-dom@18.2.0Hooks useFormState - This feature is available in the latest CanaryuseFormStatus - This feature is available in the latest CanaryComponents Common (e.g. <div>) <form> - This feature is available in the latest Canary<input> <option> <progress> <select> <textarea> <link> - This feature is available in the latest Canary<meta> - This feature is available in the latest Canary<script> - This feature is available in the latest Canary<style> - This feature is available in the latest Canary<title> - This feature is available in the latest CanaryAPIs createPortal flushSync findDOMNode hydrate preconnect - This feature is available in the latest CanaryprefetchDNS - This feature is available in the latest Canarypreinit - This feature is available in the latest CanarypreinitModule - This feature is available in the latest Canarypreload - This feature is available in the latest CanarypreloadModule - This feature is available in the latest Canaryrender unmountComponentAtNode Client APIs createRoot hydrateRoot Server APIs renderToNodeStream renderToPipeableStream renderToReadableStream renderToStaticMarkup renderToStaticNodeStream renderToString Rules of ReactOverview Components and Hooks must be pure React calls Components and Hooks Rules of Hooks Legacy APIsLegacy React APIs Children cloneElement Component createElement createFactory createRef isValidElement PureComponent Is this page useful?API ReferenceReact Reference OverviewThis section provides detailed reference documentation for working with React. For an introduction to React, please visit the Learn section. The React reference documentation is broken down into functional subsections: React Programmatic React features: Hooks - Use different React features from your components. Components - Documents built-in components that you can use in your JSX. APIs - APIs that are useful for defining components. Directives - Provide instructions to bundlers compatible with React Server Components. React DOM React-dom contains features that are only supported for web applications (which run in the browser DOM environment). This section is broken into the following: Hooks - Hooks for web applications which run in the browser DOM environment. Components - React supports all of the browser built-in HTML and SVG components. APIs - The react-dom package contains methods supported only in web applications. Client APIs - The react-dom/client APIs let you render React components on the client (in the browser). Server APIs - The react-dom/server APIs let you render React components to HTML on the server. Rules of React React has idioms — or rules — for how to express patterns in a way that is easy to understand and yields high-quality applications: Components and Hooks must be pure – Purity makes your code easier to understand, debug, and allows React to automatically optimize your components and hooks correctly. React calls Components and Hooks – React is responsible for rendering components and hooks when necessary to optimize the user experience. Rules of Hooks – Hooks are defined using JavaScript functions, but they represent a special type of reusable UI logic with restrictions on where they can be called. Legacy APIs Legacy APIs - Exported from the react package, but not recommended for use in newly written code. NextHooksHow do you like these docs?Take our survey!©2024Learn ReactQuick StartInstallationDescribing the UIAdding InteractivityManaging StateEscape HatchesAPI ReferenceReact APIsReact DOM APIsCommunityCode of ConductMeet the TeamDocs ContributorsAcknowledgementsMoreBlogReact NativePrivacyTermsOn this pageOverviewReact React DOM Rules of React Legacy APIs